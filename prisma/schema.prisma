  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  model Product {
    id          String    @id @default(cuid())
    name        String
    slug        String    @unique(map: "product_slug_idx")
    category    String
    images      String[]
    cartItem    CartItem?
    brand       String
    description String
    stock       Int
    price       String
    rating      Decimal   @default(0) @db.Decimal(3, 2)
    numReviews  Int       @default(0)
    isFeatured  Boolean   @default(false)
    banner      String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
  }

  model User {
    id            String    @id @default(cuid())
    name          String    @default("NO_NAME")
    role          Role      @default(USER)
    email         String    @unique(map: "user_email_idx")
    emailVerified DateTime?
    address       Json?
    paymentMethod String?
    password      String
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]

    cart Cart?
  }

  enum Role {
    ADMIN
    USER
  }

  model Account {
    id                 String    @id @default(cuid())
    userId             String
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
  }

  model Cart {
    id            String     @id @default(cuid())
    userId        String?    @unique
    sessionCartId String
    items         CartItem[]
    itemsPrice    String
    totalPrice    String
    shippingPrice String
    taxPrice      String
    user          User?      @relation(fields: [userId], references: [id])
    createdAt     DateTime   @default(now())
    upadatedAt    DateTime   @updatedAt
  }

  model CartItem {
    id        String  @id @default(cuid())
    productId String  @unique
    product   Product @relation(fields: [productId], references: [id],onDelete: Cascade)
    name      String
    slug      String
    qty       Int
    image     String
    price     String
    cartId    String
    cart      Cart    @relation(fields: [cartId], references: [id])
  }
